#!/usr/bin/python3
import subprocess
import os
import sys
import json
import yaml
import re
import unicodedata
from urllib import request
from urllib.error import HTTPError

BASE_URL = "https://raw.githubusercontent.com/Gadgetoid/Pinout2/master/src/en-GB/"
IGNORE_OVERLAYS = ["ground","spi","uart","i2c","wiringpi","arduino-spi"]

VERSION_MAJOR = "1"
VERSION_MINOR = "0"

FG_BLACK = 30
FG_RED = 31
FG_GREEN = 32
FG_YELLOW = 33
FG_BLUE = 34
FG_MAGENTA = 35
FG_CYAN = 36
FG_WHITE = 37
BG_BLACK = 40
BG_RED = 41

def load_yaml(file):
    data = None
    if file.startswith("http"):
        try:
            data = request.urlopen(file).read().decode()
        except HTTPError:
            return None
    else:
        data = open(file).read()

    return yaml.load(data)


def load_markyaml(file):
    '''
    Loads and parses JSON-embedded Markdown file, chopping out and
    parsing any JSON contained therein.

    Returns an object that includes the JSON data, and the parsed HTML.
    '''
    markson = None
    if file.startswith("http"):
        try:
            markson = request.urlopen(file).read().decode()
        except HTTPError:
            return None
    else:
        markson = open(file).read()

    _data = re.search(re.compile(r'<!--(JSON:|\n---\n)(.*)-->', re.DOTALL),markson)

    _markdown = re.sub(re.compile(r'<!--(JSON:|\n---\n)(.*)-->', re.DOTALL),'',markson)
    _html = _markdown
    
    # Scan for the Title in the Markdown file, this is always assumed
    # to be the first string starting with a single hash/pound ( # ) sign
    _title = re.search(re.compile(r'^#[^\#](.*)$', re.MULTILINE),markson)

    if _title != None:
        _title = _title.group(0).replace('#','').strip()

    if _data != None:
        _type = _data.group(0)[4:8].upper().strip()

        if _type == 'JSON':
            _data = re.search('\{(.*)\}',_data.group(0),re.DOTALL).group(0)
            _data = json.loads(_data)
        elif _type == '---':
            _data = re.search('\n(.*)\n',_data.group(0),re.DOTALL).group(0)
            _data = yaml.load(_data)
        else:
            data = {}

        _data['title'] = _title

    elif _title != None:
        _data = {'title':_title}

    return {'data':_data, 'html':_html}

def okay(message):
    return in_color(FG_GREEN,BG_BLACK,message)


def warning(message):
    return in_color(FG_YELLOW,BG_BLACK,message)


def error(message):
    return in_color(FG_RED,BG_BLACK,message)


def in_color(fg, bg, message):
    return '\x1b[0;' + str(fg) + ';' + str(bg) + 'm' + message + '\x1b[0m'


def run_cmd(cmd):
    result = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return result.stdout.read().decode(), result.stderr.read().decode()


def pip_check(python_version, package_name):
    cmd = "pip{} search {}".format(python_version, package_name)
    result = run_cmd(cmd)
    return 'INSTALLED' in result[0]


def apt_check(package_name):
    cmd = "dpkg-query -W --showformat='${Status}' " + package_name
    result = run_cmd(cmd)
    return result[0] == 'install ok installed'


def install_apt_packages(package_list):
    print("Checking for apt packages...")
    req = []
    for package in package_list:
        if apt_check(package):
            print("    {}: {}".format(package, okay("Found!")))
        else:
            print("    {}: {}".format(package, warning("Not found!")))
            req.append(package)

    if len(req) > 0:
        print("\nInstalling apt packages...")
        cmd = "sudo apt-get --force-yes --yes install {}".format(" ".join(req))
        print("    " + warning(cmd))
        result = run_cmd(cmd)
        #print(result)
        for package in req:
            if "Setting up " + package in result[0]:
                print(okay("    Successfully installed: {}".format(package)))
            elif "Unable to locate package {}".format(package):
                print(error("    Unable to locate: {}".format(package)))
            else:
                print(error("    Failed to install: {}".format(package)))

def install_python_packages(python_version, package_list, reinstall=False):
    print("Checking for Python {} packages...".format(python_version))
    req = []
    for package in package_list:
        
        if pip_check(python_version, package):
            if reinstall:
                print("    {}: {} ({})".format(package, okay("Found!"), warning("Will Reinstall")))
                req.append(package)
            else:
                print("    {}: {}".format(package, okay("Found!")))
        else:
            print("    {}: Not found! Will install.".format(package))
            req.append(package)
       
        if len(req) > 0:
            print("\nInstalling Python {} packages...".format(python_version))
            cmd = "sudo pip{} install {} {}".format(python_version,["","-I"][reinstall]," ".join(req))
            print("    " + warning(cmd))
            result = run_cmd(cmd)
            for package in req:
                if "Successfully installed {}".format(package) in result[0]:
                    print(okay("    Successfully installed {}".format(package)))
                else:
                    print(error("    Failed to install {}".format(package)))


def install_examples(repository, directory):
    temp = "__pimstaller__"
    name = repository.split('/')[-1]

    if not directory.endswith('/'):
        directory += '/'

    print("Installing examples from {}".format(repository))
    
    cmd = " && ".join(["rm -rf " + temp,
                       "mkdir -p " + temp,
                       "cd " + temp,
                       "git clone --depth 1 " + repository,
                       "mkdir -p ~/Pimoroni/" + name,
                       "cp -r " + name + '/' + directory + "* ~/Pimoroni/" + name,
                       "cd ../",
                       "rm -rf " + temp])
    #print(warning(cmd))
    result = run_cmd(cmd)
    #print(result)
    print(okay("    Find examples in ~/Pimoroni/{}".format(name)))

def main():
    reinstall = False
    
    if len(sys.argv) < 2:
        print(error("You must specify a board to install."))
        print("")
        print("Valid boards:")
        f = load_yaml(BASE_URL + "settings.yaml")
        for board in f["overlays"]:
            if not board in IGNORE_OVERLAYS:
                print(board)
        exit(2)

    board = sys.argv[1]

    reinstall = '--reinstall' in sys.argv

    if os.path.isfile(board + '.yaml'):
        url = board + '.yaml'
        print(warning("Using local file!"))
    else:
        url = BASE_URL + "overlay/" + board + '.md'

    print("Reading {}".format(url))
    print("")

    f = load_markyaml(url)

    if f is None:
        print(error("Unable to locate board!"))
        exit(1)

    if 'title' in f['data']:
        print(okay("Found board {}".format(f['data']['title'])))

    for tag in ['description','manufacturer','github','url']:
        if tag in f['data']:
            print("    {}: {}".format(tag.capitalize(), f['data'][tag]))

    print("")

    if 'install' not in f['data']:
        print(error("No install data available for board: {}.".format(f['data']['title'])))
        exit(1)

    print(okay("Install data found. Installing..."))

    install = f['data']['install']

    apt_req = []
    if 'apt' in install:
        apt_req = install['apt']

    if 'python' in install and 'python-pip' not in install['apt']:
        apt_req.append('python-pip')
        
    if 'python3' in install and 'python3-pip' not in install['apt']:
        apt_req.append('python3-pip')

    if len(apt_req):  
        install_apt_packages(apt_req)
        print("")

    if 'python' in install:
        install_python_packages(2,install['python'],reinstall)
        print("")
        
    if 'python3' in install:
        install_python_packages(3,install['python3'],reinstall)
        print("")

    if 'examples' in install and 'github' in f['data']:
        install_examples(f['data']['github'], install['examples'])
        print("")

    print(okay("Done!"))
    exit(0)

if __name__ == "__main__":
    print("""Welcome to Pimstaller, a Raspberry Pi add-on installer.
Version {}.{}
Created by Pimoroni, contribute at http://github.com/pimoroni/pimstaller
""".format(VERSION_MAJOR, VERSION_MINOR))

    try:
        main()
    except KeyboardInterrupt:
        exit(1)
