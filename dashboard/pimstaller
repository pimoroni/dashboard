#!/bin/bash

: <<'DISCLAIMER'

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

This script is licensed under the terms of the MIT license.
Unless otherwise noted, code reproduced herein
was written for this script.

- The Pimoroni Crew -

DISCLAIMER

productname="Pimstaller" # the name of the product to install
scriptname="pimstaller" # the name of this script
debugmode="no" # whether the script should use test Git user, branch and routines
forcesudo="no" # whether the script requires to be ran with root privileges
promptreboot="yes" # whether the script should always prompt user to reboot
customcmd="no" # whether to execute commands specified before exit
armv6="yes" # whether armv6 processors is supported or not
armv7="yes" # whether armv7 processors is supported or not
armv8="yes" # whether armv8 processors is supported or not
raspbianonly="no" # whether the script is allowed to run on other OSes
squeezesupport="no" # whether Squeeze is supported or not
wheezysupport="yes" # whether Wheezy is supported or not
jessiesupport="yes" # whether Jessie is supported or not

confirm() {
    if [ "$FORCE" == '-y' ]; then
        true
    else
        read -r -p "$1 [y/N] " response < /dev/tty
        if [[ $response =~ ^(yes|y|Y)$ ]]; then
            true
        else
            false
        fi
    fi
}

success() {
    echo "$(tput setaf 2)$1$(tput sgr0)"
}

warning() {
    echo "$(tput setaf 1)$1$(tput sgr0)"
}

newline() {
    echo ""
}

timestamp() {
    date +%Y%m%d-%H%M
}

sudocheck() {
    if [ $(id -u) -ne 0 ]; then
        echo -e "Install must be run as root. Try 'sudo ./$scriptname'\n"
        exit 1
    fi
}

sysclean() {
    sudo apt-get clean && sudo apt-get autoclean
    sudo apt-get -y autoremove &> /dev/null
}

sysupdate() {
    sudo apt-get update
}

sysupdgrade() {
    sudo apt-get update && sudo apt-get upgrade
    sudo apt-get clean && sudo apt-get autoclean
    sudo apt-get -y autoremove &> /dev/null
}

sysreboot() {
    warning "Some changes made to your system require"
    warning "your computer to reboot to take effect."
    newline
    if confirm "Would you like to reboot now?"; then
        sync
        sudo reboot
    fi
}

arch_check() {
    IS_ARMv6=false

    if uname -m | grep "armv6l" > /dev/null; then
        IS_ARMv6=true
    fi
}

os_check() {
    IS_RASPBIAN=false
    IS_MACOSX=false
    IS_X86_64=false
    IS_X86_32=false

    if [ -f /etc/os-release ] && cat /etc/os-release | grep "Raspbian" > /dev/null; then
        IS_RASPBIAN=true
    elif uname -s | grep "Darwin" > /dev/null; then
        IS_MACOSX=true
    elif uname -m | grep "x86_64" > /dev/null; then
        IS_X86_64=true
    else
        IS_X86_32=true
    fi
}

raspbian_check() {
    IS_SQUEEZE=false
    IS_WHEEZY=false
    IS_JESSIE=false

    if [ -f /etc/os-release ]; then
        if cat /etc/os-release | grep "jessie" > /dev/null; then
            IS_JESSIE=true
        elif cat /etc/os-release | grep "wheezy" > /dev/null; then
            IS_WHEEZY=true
        elif cat /etc/os-release | grep "squeeze" > /dev/null; then
            IS_SQUEEZE=true
        else
            echo "Unsupported distribution"
            exit 1
        fi
    fi
}

raspbian_old() {
    if $IS_SQUEEZE || $IS_WHEEZY ;then
        true
    else
        false
    fi
}

home_dir() {
    if ! $IS_MACOSX; then
        if [ $EUID -ne 0 ]; then
            USER_HOME=$(getent passwd $USER | cut -d: -f6)
        else
            if $SUDO_USER; then
                USER_HOME=$(getent passwd $SUDO_USER | cut -d: -f6)
            else
                warning "Running as root and no other sudo user available"
                exit 1
            fi
        fi
    else
        if [ $EUID -ne 0 ]; then
            USER_HOME=$(dscl . -read /Users/$USER NFSHomeDirectory | cut -d: -f2)
        else
            USER_HOME=$(dscl . -read /Users/$SUDO_USER NFSHomeDirectory | cut -d: -f2)
        fi
    fi
}

check_network() {
    sudo ping -q -w 1 -c 1 `ip r | grep default | cut -d ' ' -f 3` &> /dev/null && return 0 || return 1
}

apt_pkg_req() {
    APT_CHK=$(dpkg-query -W -f='${Status}\n' $1 2> /dev/null | grep "install ok installed")

    if [ "" == "$APT_CHK" ]; then
        true
    else
        false
    fi
}

self_update() {
    if check_network; then
        echo "Updating..."
        export TMPDIR=`mktemp -d /tmp/pimoroni.XXXXXX`
        curl -sS get.pimoroni.com/pimstaller >> $TMPDIR/pimstaller
        sudo cp $TMPDIR/pimstaller $DASHBOARD_SCRIPT
        rm -rf $TMPDIR
        pimstaller
        exit 0
    fi
}

get_install() {
    check_network || (whip_msgbox "You don't appear to be connected to the internet, please check your connection and try again!" && exit 1)
    \curl -sS get.pimoroni.com/$1 | bash
    read -p "Press [Enter] to continue..." < /dev/tty
}

save_stdout() {
    savename=$(timestamp)-info.txt
    get_install $1 2>&1 | tee ~/Desktop/$savename
    sed -i "/Press [Enter]/d" ~/Desktop/$savename
    whip_msgbox "Success, your system info has been saved to the Desktop!"
}

save_snap() {
    if ! command -v scrot > /dev/null; then
        warning "scrot is not installed" 
        echo "try: sudo apt-get install scrot"
    elif ! [ "$DISPLAY" ]; then
        whip_msgbox "X is not running, we can't take screenshots, sorry!"        
    else
        whip_msgbox "Please hit enter and then select the area you would like to screenshot by drawing a rectangle with your mouse.\n\nMake sure to move this window out of the way first!\n\nThis screenshot will be stored on your desktop, from where you can share it with us or with the world!"
        echo "Taking screenshot..."
        echo "Draw a rectangle around your subject."
        scrot -s ~/Desktop/%Y%m%d-%H%M-snap.png
        whip_msgbox "Success, your screenshot has been saved to the Desktop!"
    fi
}

whip_confirm() {
    whiptail --yesno "$1" $WT_HEIGHT $(($WT_WIDTH-20))
}

whip_msgbox() {
    whiptail --msgbox "$1" $WT_HEIGHT $(($WT_WIDTH-20))
}

whip_size() {
    WT_HEIGHT=17
    WT_WIDTH=$(tput cols)
    if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
        WT_WIDTH=80
    fi
    if [ "$WT_WIDTH" -gt 178 ]; then
        WT_WIDTH=120
    fi
    WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

arch_check
os_check
whip_size
home_dir

WORKING_DIR="$USER_HOME/Pimoroni"
DESKTOP_FILE="$USER_HOME/Desktop/pimstaller.desktop"
DESKTOP_APP_FILE="/usr/share/applications/pimstaller.desktop"
DESKTOP_ICON="/usr/share/pixmaps/pimstaller.png"
DASHBOARD_SCRIPT="/usr/bin/pimstaller"

[ -d $WORKING_DIR ] || mkdir $WORKING_DIR
cd $WORKING_DIR

if $IS_RASPBIAN; then
    raspbian_check
    if [ $squeezesupport == "no" ] && $IS_SQUEEZE; then
        newline
        warning "--- Warning ---"
        newline
        echo "The $productname installer"
        echo "does not work on this version of Raspbian."
        echo "Check https://github.com/$gitusername/$gitreponame"
        echo "for additional information and support"
        newline
        exit 1
    fi
    if [ $wheezysupport == "no" ] && $IS_WHEEZY; then
        newline
        warning "--- Warning ---"
        newline
        echo "The $productname installer"
        echo "does not work on this version of Raspbian."
        echo "Check https://github.com/$gitusername/$gitreponame"
        echo "for additional information and support"
        newline
        exit 1
    fi
elif ! $IS_RASPBIAN && [ $raspbianonly == "yes" ]; then
    warning "Warning!"
    echo "Please only run this script on Raspbian on your Raspberry Pi"
    exit 1
else
    if [ $debugmode != "no" ]; then
        newline
        echo "IS_RASPBIAN is $IS_RASPBIAN"
        echo "IS_MACOSX is $IS_MACOSX"
        echo "IS_X86_64 is $IS_X86_64"
        echo "IS_X86_32 is $IS_X86_32"
    fi
fi

if [ $forcesudo == "yes" ]; then
    sudocheck
fi

hat_menu() {
    HAT=$(whiptail --title "Pimoroni Software Installer" --menu "Choose your add-on..." $WT_HEIGHT $(($WT_WIDTH-10)) $WT_MENU_HEIGHT \
    --cancel-button Back \
    --ok-button Select \
            "Display-o-Tron HAT" "" \
            "Drum HAT" "" \
            "Explorer HAT" "" \
            "Piano HAT" "" \
            "Skywriter HAT" "" \
            "Unicorn HAT" "" \
    3>&1 1>&2 2>&3)

    RETURN=$?
    if [ $RETURN -eq 1 ]; then
        return 0
    elif [ $RETURN -eq 0 ]; then
        case "$HAT" in
            Display-o-Tron\ *) get_install displayotron ;;
            Drum\ *) get_install drumhat ;;
            Explorer\ *) get_install explorerhat ;;
            Piano\ *) get_install pianohat ;;
            Skywriter\ *) get_install skywriter ;;
            Unicorn\ *) get_install unicornhat ;;
            *) whip_msgbox "Error: unrecognized option";;
        esac ||whip_msgbox "There was an error running option $HAT"
    fi
}

phat_menu() {
    PHAT=$(whiptail --title "Pimoroni Software Installer" --menu "Choose your add-on..." $WT_HEIGHT $(($WT_WIDTH-10)) $WT_MENU_HEIGHT \
    --cancel-button Back \
    --ok-button Select \
            "Enviro pHAT" "" \
            "ESP IoT pHAT" "" \
            "Explorer pHAT" "" \
            "Micro Dot pHAT" "" \
            "pHAT DAC" "" \
            "Scroll pHAT" "" \
            "Unicorn pHAT" "" \
    3>&1 1>&2 2>&3)

    RETURN=$?
    if [ $RETURN -eq 1 ]; then
        return 0
    elif [ $RETURN -eq 0 ]; then
        case "$PHAT" in
            Enviro\ *) get_install envirophat ;;
            ESP\ *) get_install iotphat ;;
            Explorer\ *) get_install explorerhat ;;
            Micro\ *) get_install microdotphat ;;
            pHAT\ *) get_install phatdac ;;
            Scroll\ *) get_install scrollphat ;;
            Unicorn\ *) get_install unicornhat ;;
            *) whip_msgbox "Error: unrecognized option";;
        esac ||whip_msgbox "There was an error running option $PHAT"
    fi
}

flot_menu() {
    FLOT=$(whiptail --title "Pimoroni Software Installer" --menu "Choose your add-on..." $WT_HEIGHT $(($WT_WIDTH-10)) $WT_MENU_HEIGHT \
    --cancel-button Back \
    --ok-button Select \
        "Flotilla Python API only" "" \
        "Rockpool (and Flotilla API)" "" \
    3>&1 1>&2 2>&3)

    RETURN=$?
    if [ $RETURN -eq 1 ]; then
        return 0
    elif [ $RETURN -eq 0 ]; then
        case "$FLOT" in
            Flotilla\ *) get_install flotilla ;;
            Rockpool\ *) get_install rockpool ;;
            *) whip_msgbox "Error: unrecognized option";;
        esac ||whip_msgbox "There was an error running option $FLOT"
    fi
}

pim_menu() {
    PIM=$(whiptail --title "Pimoroni Software Installer" --menu "Choose your add-on..." $WT_HEIGHT $(($WT_WIDTH-10)) $WT_MENU_HEIGHT \
    --cancel-button Back \
    --ok-button Select \
            "Blinkt! " "import blinkt" \
            "Display-o-Tron 3000" "import dot3k" \
            "Pibrella " "import pibrella" \
            "Piglow " "import piglow" \
            "Skywriter board" "import skywriter" \
    3>&1 1>&2 2>&3)

    RETURN=$?
    if [ $RETURN -eq 1 ]; then
        return 0
    elif [ $RETURN -eq 0 ]; then
        case "$PIM" in
            Blinkt!\ *) get_install blinkt ;;
            Display-o-Tron\ *) get_install dot3k ;;
            Pibrella\ *) get_install pibrella ;;
            Piglow\ *) get_install piglow ;;
            Skywriter\ *) get_install skywriter ;;
            *) whip_msgbox "Error: unrecognized option";;
        esac ||whip_msgbox "There was an error running option $PIM"
    fi
}

util_menu() {
    UTIL=$(whiptail --title "Pimoroni Software Installer" --menu "Choose your add-on..." $WT_HEIGHT $(($WT_WIDTH-10)) $WT_MENU_HEIGHT \
    --cancel-button Back \
    --ok-button Select \
            "Gather System Info" "" \
            "Take Screenshot" "" \
            "Upgrade my Pi Software" "" \
            "Update Product List" "" \
    3>&1 1>&2 2>&3)

    RETURN=$?
    if [ $RETURN -eq 1 ]; then
        return 0
    elif [ $RETURN -eq 0 ]; then
        case "$UTIL" in
            Gather\ *) save_stdout cpuinfo ;;
            Take\ *) save_snap ;;
            Upgrade\ *) get_install uptodate ;;
            Update\ *) self_update ;;
            *) whip_msgbox "Error: unrecognized option";;
        esac ||whip_msgbox "There was an error running option $UTIL"
    fi
}

whip_msgbox "\
    This handy tool will help you get started with Pimoroni products. Simply pick the add-on board you want to set up from the list, hit select and we'll walk you through the install process in a few easy steps.

    Enjoy

    - The Pimoroni Crew\
"

while true; do
    MAIN=$(whiptail --title "Pimoroni Software Installer" --menu "Choose your add-on..." $WT_HEIGHT $(($WT_WIDTH-10)) $WT_MENU_HEIGHT \
    --cancel-button Quit \
    --ok-button Select \
            "1 my Pimoroni product is a HAT" "" \
            "2 my Pimoroni product is a pHAT" "" \
            "3 my Pimoroni product is Flotilla" "" \
            "4 my product is something else" "" \
            "5 I have a problem and need help" "" \
    3>&1 1>&2 2>&3)

    RETURN=$?
    if [ $RETURN -eq 1 ]; then
        exit 1
    elif [ $RETURN -eq 0 ]; then
        case "$MAIN" in
            1\ *) hat_menu ;;
            2\ *) phat_menu ;;
            3\ *) flot_menu ;;
            4\ *) pim_menu ;;
            5\ *) util_menu ;;
            *) whip_msgbox "Error: unrecognized option";;
        esac ||whip_msgbox "There was an error running option $MAIN"
    else
      exit 1
    fi
done

exit 0
