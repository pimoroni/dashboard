#!/bin/bash

: <<'DISCLAIMER'

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

This script is licensed under the terms of the MIT license.
Unless otherwise noted, code reproduced herein
was written for this script.

- The Pimoroni Crew -

DISCLAIMER

# script control variables

productname="Pimstaller" # the name of the product to install
prodversion="2016-11-12" # version of the present implementation
prodbuild="1615" # build for testing purposes
scriptname="pimstaller" # the name of this script
spacereq=50 # minimum size required on root partition in MB
debugmode="no" # whether the script should use debug routines
debuguser="none" # optional test git user to use in debug mode
debugpoint="none" # optional git repo branch or tag to checkout
forcesudo="no" # whether the script requires to be ran with root privileges
promptreboot="no" # whether the script should always prompt user to reboot
customcmd="no" # whether to execute commands specified before exit
armhfonly="yes" # whether the script is allowed to run on other arch
armv6="yes" # whether armv6 processors are supported
armv7="yes" # whether armv7 processors are supported
armv8="yes" # whether armv8 processors are supported
raspbianonly="no" # whether the script is allowed to run on other OSes
osreleases=( "Raspbian" "Kano" "Mate" "PiTop" ) # list os-releases supported
oswarning=( "Debian" ) # list experimental os-releases
osdeny=( "Darwin" "Kali" "Ubuntu" ) # list os-releases specifically disallowed

deblist=( \
"automationhat" \
"blinkt" \
"drumhat" \
"envirophat" \
"explorerhat" \
"microdotphat" \
"mote" \
"motephat" \
"pantilthat" \
"pianohat" \
"pibrella" \
"picadehat" \
"piglow" \
"scrollphat" \
"unicornhat" )

addlist=( \
"displayotron" \
"flotilla" \
"propellerhat" \
"skywriterhat" )

# setup variables

FORCE=$1
ASK_TO_REBOOT=false
CURRENT_SETTING=false
MIN_INSTALL=false
FAILED_PKG=false
REMOVE_PKG=false
UPDATE_DB=false

DESKTOP_FILE="~/Desktop/pimstaller.desktop"
DESKTOP_APP_FILE="/usr/share/applications/pimstaller.desktop"
DESKTOP_ICON="/usr/share/pixmaps/pimstaller.png"
DASHBOARD_SCRIPT="/usr/bin/pimstaller"

# function define

confirm() {
    if [ "$FORCE" == '-y' ]; then
        true
    else
        read -r -p "$1 [y/N] " response < /dev/tty
        if [[ $response =~ ^(yes|y|Y)$ ]]; then
            true
        else
            false
        fi
    fi
}

prompt() {
        read -r -p "$1 [y/N] " response < /dev/tty
        if [[ $response =~ ^(yes|y|Y)$ ]]; then
            true
        else
            false
        fi
}

success() {
    echo -e "$(tput setaf 2)$1$(tput sgr0)"
}

inform() {
    echo -e "$(tput setaf 6)$1$(tput sgr0)"
}

warning() {
    echo -e "$(tput setaf 1)$1$(tput sgr0)"
}

newline() {
    echo ""
}

sudocheck() {
    if [ $(id -u) -ne 0 ]; then
        echo -e "Install must be run as root. Try 'sudo ./$scriptname'\n"
        exit 1
    fi
}

sysclean() {
    sudo apt-get clean && sudo apt-get autoclean
    sudo apt-get -y autoremove &> /dev/null
}

sysupdate() {
    if ! $UPDATE_DB; then
        echo "Updating apt indexes..."
        sudo apt-get update | grep -e "Reading package lists" || { warning "Apt failed to update indexes!" && exit 1; }
        UPDATE_DB=true
    fi
}

sysupgrade() {
    sudo apt-get update && sudo apt-get upgrade
    sudo apt-get clean && sudo apt-get autoclean
    sudo apt-get -y autoremove &> /dev/null
}

sysreboot() {
    warning "Some changes made to your system require"
    warning "your computer to reboot to take effect."
    newline
    if prompt "Would you like to reboot now?"; then
        sync && sudo reboot
    fi
}

arch_check() {
    IS_ARMHF=false
    IS_ARMv6=false

    if uname -m | grep "armv.l" > /dev/null; then
        IS_ARMHF=true
        if uname -m | grep "armv6l" > /dev/null; then
            IS_ARMv6=true
        fi
    fi
}

os_check() {
    IS_RASPBIAN=false
    IS_MACOSX=false
    IS_SUPPORTED=false
    IS_EXPERIMENTAL=false

    if [ -f /etc/os-release ]; then
        if cat /etc/os-release | grep "Raspbian" > /dev/null; then
            IS_RASPBIAN=true && IS_SUPPORTED=true
        fi
        if command -v apt-get > /dev/null; then
            for os in ${osreleases[@]}; do
                if cat /etc/os-release | grep $os > /dev/null; then
                    IS_SUPPORTED=true && IS_EXPERIMENTAL=false
                fi
            done
            for os in ${oswarning[@]}; do
                if cat /etc/os-release | grep $os > /dev/null; then
                    IS_SUPPORTED=false && IS_EXPERIMENTAL=true
                fi
            done
            for os in ${osdeny[@]}; do
                if cat /etc/os-release | grep $os > /dev/null; then
                    IS_SUPPORTED=false && IS_EXPERIMENTAL=false
                fi
            done
        fi
    fi
    if [ -d ~/.kano-settings ] || [ -d ~/.kanoprofile ]; then
        IS_RASPBIAN=false
        for os in ${oswarning[@]}; do
            if [ $os == "Kano" ]; then
                IS_SUPPORTED=false && IS_EXPERIMENTAL=true
            fi
        done
        for os in ${osdeny[@]}; do
            if [ $os == "Kano" ]; then
                IS_SUPPORTED=false && IS_EXPERIMENTAL=false
            fi
        done
    fi
    if [ -f ~/.pt-dashboard-config ] || [ -d ~/.pt-dashboard ]; then
        IS_RASPBIAN=false
        for os in ${oswarning[@]}; do
            if [ $os == "PiTop" ]; then
                IS_SUPPORTED=false && IS_EXPERIMENTAL=true
            fi
        done
        for os in ${osdeny[@]}; do
            if [ $os == "PiTop" ]; then
                IS_SUPPORTED=false && IS_EXPERIMENTAL=false
            fi
        done
    fi
    if [ -d ~/.config/ubuntu-mate ]; then
        for os in ${osdeny[@]}; do
            if [ $os == "Mate" ]; then
                IS_SUPPORTED=false && IS_EXPERIMENTAL=false
            fi
        done
    fi
    if uname -s | grep "Darwin" > /dev/null; then
        IS_MACOSX=true
        for os in ${osdeny[@]}; do
            if [ $os == "Darwin" ]; then
                IS_SUPPORTED=false && IS_EXPERIMENTAL=false
            fi
        done
    fi
}

raspbian_check() {
    IS_SUPPORTED=false
    IS_EXPERIMENTAL=false

    if [ -f /etc/os-release ]; then
        if cat /etc/os-release | grep "/sid" > /dev/null; then
            IS_SUPPORTED=false && IS_EXPERIMENTAL=true
        elif cat /etc/os-release | grep "stretch" > /dev/null; then
            IS_SUPPORTED=false && IS_EXPERIMENTAL=true
        elif cat /etc/os-release | grep "jessie" > /dev/null; then
            IS_SUPPORTED=true && IS_EXPERIMENTAL=false
        elif cat /etc/os-release | grep "wheezy" > /dev/null; then
            IS_SUPPORTED=true && IS_EXPERIMENTAL=false
        else
            IS_SUPPORTED=false && IS_EXPERIMENTAL=false
        fi
    fi
}

home_dir() {
    if [ $EUID -ne 0 ]; then
        if $IS_MACOSX; then
            USER_HOME=$(dscl . -read /Users/$USER NFSHomeDirectory | cut -d: -f2)
        else
            USER_HOME=$(getent passwd $USER | cut -d: -f6)
        fi
    else
        warning "Running as root, login as a regular user with sudo rights!"
        newline && exit 1
    fi
}

space_chk() {
    if command -v stat > /dev/null && ! $IS_MACOSX; then
        if [ $spacereq -gt $(($(stat -f -c "%a*%S" /)/10**6)) ];then
            newline
            warning  "There is not enough space left to proceed with  installation"
            if confirm "Would you like to attempt to expand your filesystem?"; then
                \curl -sS $GETPOOL/expandfs | sudo bash
                exit 1
            else
                newline && exit 1
            fi
        fi
    fi
}

timestamp() {
    date +%Y%m%d-%H%M
}

check_network() {
    sudo ping -q -w 1 -c 1 `ip r | grep default | cut -d ' ' -f 3 | head -n 1` &> /dev/null && return 0 || return 1
}

apt_pkg_req() {
    APT_CHK=$(dpkg-query -W -f='${Status}\n' $1 2> /dev/null | grep "install ok installed")

    if [ "" == "$APT_CHK" ]; then
        echo "$1 is required"
        true
    else
        echo "$1 is already installed"
        false
    fi
}

apt_pkg_install() {
    echo "Installing $1..."
    sudo apt-get --yes install "$1" 1> /dev/null || { warning "Apt failed to install $1!" && FAILED_PKG=true && return 1; }
    newline
}

apt_deb_chk() {
    sudo apt-get --yes install "$1" 2> /dev/null | grep -e "$1 is already the newest" -e "Setting up $1" | sed "s|.$||" || return 1
}

apt_deb_install() {
    echo "Installing $1..."
    sudo apt-get --yes install "$1" 1> /dev/null || inform "Apt failed to install $1!\nFalling back on pypi..."
    newline
}

pip2_chk() {
    if command -v pip2 > /dev/null; then
        PIP2_BIN="pip2"
    elif command -v pip-2.7 > /dev/null; then
        PIP2_BIN="pip-2.7"
    elif command -v pip-2.6 > /dev/null; then
        PIP2_BIN="pip-2.6"
    else
        PIP2_BIN="pip"
    fi
}

pip2_pkg_req() {
    PIP2_CHK=$($PIP2_BIN search $1 | grep INSTALLED)

    if [ "" == "$PIP2_CHK" ]; then
        true
    else
        false
    fi
}

pip3_chk() {
    if command -v pip3 > /dev/null; then
        PIP3_BIN="pip3"
    elif command -v pip-3.3 > /dev/null; then
        PIP3_BIN="pip-3.3"
    elif command -v pip-3.2 > /dev/null; then
        PIP3_BIN="pip-3.2"
    else
        PIP3_BIN="pip"
    fi
}

pip3_pkg_req() {
    PIP3_CHK=$($PIP3_BIN search $1 | grep INSTALLED)

    if [ "" == "$PIP3_CHK" ]; then
        true
    else
        false
    fi
}

lib_chk() {
    sysupdate && UPDATE_DB=true
    pip2_chk && pip3_chk
    echo "Checking for installed libraries..."    
    for libdeb in ${deblist[@]}; do
        echo "$libdeb..."
        if pip2_pkg_req "$libdeb" && pip3_pkg_req "$libdeb"; then
        echo "$libdeb is not installed"
        else
            if command -v $PIP2_BIN > /dev/null && ! pip2_pkg_req "$libdeb"; then
                if ! apt_deb_chk "python-$libdeb"; then
                    PIP2_MSG=$(sudo $PIP2_BIN install -U "$libdeb" | grep  -e "Successfully installed $libdeb" -e "already up-to-date: $libdeb")
                    if [[ "$PIP2_MSG" == *"up-to-date"* ]]; then
                        echo "$PIP2_MSG"
                    else
                        echo "$PIP2_MSG for Python 2" | sed "s|installed|upgraded|"
                    fi                   
                fi
            fi
            if command -v $PIP3_BIN > /dev/null && ! pip3_pkg_req "$libdeb"; then
                if ! apt_deb_chk "python3-$libdeb"; then
                    PIP3_MSG=$(sudo $PIP3_BIN install -U "$libdeb" | grep  -e "Successfully installed $libdeb" -e "already up-to-date: $libdeb")
                    if [[ "$PIP3_MSG" == *"up-to-date"* ]]; then
                        echo "$PIP3_MSG"
                    else
                        echo "$PIP3_MSG for Python 3" | sed "s|installed|upgraded|"
                    fi                   
                fi
            fi
        fi
    done
    newline && inform "all libraries are now up-to-date!" && newline
}

get_install() {
    check_network || (error_box "You don't appear to be connected to the internet, please check your connection and try again!" && exit 1)
    if [ "$1" != diagnostic ];then
        sysupdate && UPDATE_DB=true
    fi
    curl -sS https://get.pimoroni.com/$1 | bash -s - "-y"
    read -p "Press Enter to continue..." < /dev/tty
}

launch_url() {
    check_network || (error_box "You don't appear to be connected to the internet, please check your connection and try again!" && exit 1)
    if command -v xdg-open > /dev/null; then
        xdg-open "$1" && return 0
    else
      error_box "There was an error attempting to launch your browser!"
    fi
}

save_stdout() {
    savename=$(timestamp)-info.txt
    if [ -n "$xdisplay" ]; then
        get_install $1 2>&1 | tee ~/Desktop/$savename
        sed -i "/Press Enter/d" ~/Desktop/$savename
        info_box "Your system info has been saved to the Desktop!"
    else
        get_install $1 2>&1 | tee ~/$savename
        sed -i "/Press Enter/d" ~/$savename
        info_box "Your system info has been saved to your home folder!"
    fi
}

save_snap() {
    if ! command -v scrot > /dev/null; then
        warning "scrot is not installed"
        echo "try: sudo apt-get install scrot"
    elif [ -z "$DISPLAY" ]; then
        error_box "X is not running, we can't take screenshots, sorry!"
    else
        info_box "\
Please hit enter and then select the area you would like\n\
to screenshot by drawing a rectangle with your mouse.\n\n\
Make sure to move this window out of the way first!\n\n\
This screenshot will be stored on your desktop,\n\
from where you can share it with us or with the world!"
        echo "Taking screenshot..."
        echo "Draw a rectangle around your subject."
        scrot -s ~/Desktop/%Y%m%d-%H%M-snap.png
        info_box "Success, your screenshot has been saved to the Desktop!"
    fi
}

self_update() {
    check_network || (error_box "You don't appear to be connected to the internet, please check your connection and try again!" && exit 1)
    curl -sS https://get.pimoroni.com/pimstaller | bash -s - "-y"
    read -p "Press Enter to continue..." < /dev/tty
    if [ -n "$xdisplay" ]; then
        status_box "Restarting!"
    else
        status_box "Click OK to restart the program and complete the update procedure."
    fi
    pimstaller -y
    exit 0
}

about_box() {
    if [ -n "$xdisplay" ]; then
        zenity --height=128 --width=256 --info --text "\n$productname\n$prodversion\nbuild $prodbuild" 2> /dev/null
    else
        whiptail --msgbox "$productname $prodversion" $BOXHEIGHT $(($BOXWIDTH-10))
    fi
}

confirm_box() {
    if [ -n "$xdisplay" ]; then
        zenity --height=128 --width=512 --question --text "$1" 2> /dev/null
    else
        whiptail --yesno "$1" $BOXHEIGHT $(($BOXWIDTH-10))
    fi
}

info_box() {
    if [ -n "$xdisplay" ]; then
        zenity --info --text "$1" --height=$BOX_MIN_HEIGHT --width=$BOXWIDTH 2> /dev/null
    else
        whiptail --msgbox "$1" $BOXHEIGHT $(($BOXWIDTH-10))
    fi
}

status_box() {
    if [ -n "$xdisplay" ]; then
        zenity --info --timeout=1 --text "$1" --height=$BOX_MIN_HEIGHT --width=$(($BOXWIDTH-256)) 2> /dev/null
    else
        whiptail --msgbox "$1" $BOXHEIGHT $(($BOXWIDTH-10))
    fi
}

error_box() {
    if [ -n "$xdisplay" ]; then
        zenity --height=128 --width=512 --error --text "$1" 2> /dev/null
    else
        whiptail --msgbox "$1" $BOXHEIGHT $(($BOXWIDTH-10))
    fi
}

box_size() {
    if [ -n "$xdisplay" ]; then
        BOXHEIGHT=320
        BOXWIDTH=512
        BOX_MIN_HEIGHT=64
    else
        BOXHEIGHT=17
        BOXWIDTH=$(tput cols)
        if [ -z "$BOXWIDTH" ] || [ "$BOXWIDTH" -lt 60 ]; then
            BOXWIDTH=80
        fi
        if [ "$BOXWIDTH" -gt 178 ]; then
            BOXWIDTH=120
        fi
        BOX_MENU_HEIGHT=$(($BOXHEIGHT-7))
    fi
}

# menu define

main_menu() {

TITLE="Pimoroni Product Installer"
MAINLIST="\
1/my Pimoroni product is a HAT/\
2/my Pimoroni product is a pHAT/\
3/my product is something else/\
4/update all installed libraries/\
5/view product documentation/\
6/I have a problem and need help"

    if [ -n "$xdisplay" ]; then
        MAIN=$(zenity --title="$TITLE" --list \
            --column="Option" --column="Description" \
            --cancel-label=Quit --ok-label=Select \
            --height=$BOXHEIGHT --width=$BOXWIDTH \
            $MAINLIST 2> /dev/null
        )
    else
        MAIN=$(whiptail --title "$TITLE" --menu "" \
            --cancel-button Quit --ok-button Select \
            $BOXHEIGHT $(($BOXWIDTH-10)) $BOX_MENU_HEIGHT \
            $MAINLIST 3>&1 1>&2 2>&3
        )
    fi

    RETURN=$?
    if [ $RETURN -eq 1 ]; then
        exit 1
    elif [ $RETURN -eq 0 ]; then
        case "$MAIN" in
            '')exit 0 ;;
            1) hat_menu ;;
            2) phat_menu ;;
            3) board_menu ;;
            4) lib_chk ;;
            5) launch_url "http://docs.pimoroni.com/blinkt" ;;
            6) util_menu ;;
            *) error_box "Error: unrecognized option";;
        esac ||error_box "There was an error running option $MAIN"
    fi
}

hat_menu() {

TITLE="Pimoroni Product Installer"
MAINLIST="\
1/Automation HAT/\
2/Display-o-Tron HAT/\
3/Drum HAT/\
4/Explorer HAT/\
5/Pan-Tilt HAT/\
6/Piano HAT/\
7/Picade HAT/\
8/Skywriter HAT/\
9/Unicorn HAT"

    if [ -n "$xdisplay" ]; then
        HAT=$(zenity --title="$TITLE" --list \
            --column="Option" --column="Description" \
            --cancel-label=Back --ok-label=Select \
            --height=$BOXHEIGHT --width=$BOXWIDTH \
            $MAINLIST 2> /dev/null
        )
    else
        HAT=$(whiptail --title "$TITLE" --menu "" \
            --cancel-button Back --ok-button Select \
            $BOXHEIGHT $(($BOXWIDTH-10)) $BOX_MENU_HEIGHT \
            $MAINLIST 3>&1 1>&2 2>&3
        )
    fi

    RETURN=$?
    if [ $RETURN -eq 1 ]; then
        return 0
    elif [ $RETURN -eq 0 ]; then
        case "$HAT" in
            1) get_install automationhat ;;
            2) get_install displayotron ;;
            3) get_install drumhat ;;
            4) get_install explorerhat ;;
            5) get_install pantilthat ;;
            6) get_install pianohat ;;
            7) get_install picadehat ;;
            8) get_install skywriter ;;
            9) get_install unicornhat ;;
            *) error_box "Error: unrecognized option";;
        esac ||error_box "There was an error running option $HAT"
    fi
}

phat_menu() {

TITLE="Pimoroni Product Installer"
MAINLIST="\
1/Enviro pHAT/\
2/ESP IoT pHAT/\
3/Explorer pHAT/\
4/Micro Dot pHAT/\
5/pHAT DAC/\
6/Scroll pHAT/\
7/Unicorn pHAT"

    if [ -n "$xdisplay" ]; then
        PHAT=$(zenity --title="$TITLE" --list \
            --column="Option" --column="Description" \
            --cancel-label=Back --ok-label=Select \
            --height=$BOXHEIGHT --width=$BOXWIDTH \
            $MAINLIST 2> /dev/null
        )
    else
        PHAT=$(whiptail --title "$TITLE" --menu "" \
            --cancel-button Back --ok-button Select \
            $BOXHEIGHT $(($BOXWIDTH-10)) $BOX_MENU_HEIGHT \
            $MAINLIST 3>&1 1>&2 2>&3
        )
    fi

    RETURN=$?
    if [ $RETURN -eq 1 ]; then
        return 0
    elif [ $RETURN -eq 0 ]; then
        case "$PHAT" in
            1) get_install envirophat ;;
            2) get_install iotphat ;;
            3) get_install explorerhat ;;
            4) get_install microdotphat ;;
            5) get_install phatdac ;;
            6) get_install scrollphat ;;
            7) get_install unicornhat ;;
            *) error_box "Error: unrecognized option";;
        esac ||error_box "There was an error running option $PHAT"
    fi
}

board_menu() {

TITLE="Pimoroni Product Installer"
MAINLIST="\
1/Blinkt!/\
2/Display-o-Tron 3000/\
3/Flotilla/\
4/Mote/\
5/Pibrella/\
6/Piglow/\
7/Skywriter"

    if [ -n "$xdisplay" ]; then
        BOARD=$(zenity --title="$TITLE" --list \
            --column="Option" --column="Description" \
            --cancel-label=Back --ok-label=Select \
            --height=$BOXHEIGHT --width=$BOXWIDTH \
            $MAINLIST 2> /dev/null
        )
    else
        BOARD=$(whiptail --title "$TITLE" --menu "" \
            --cancel-button Back --ok-button Select \
            $BOXHEIGHT $(($BOXWIDTH-10)) $BOX_MENU_HEIGHT \
            $MAINLIST 3>&1 1>&2 2>&3
        )
    fi

    RETURN=$?
    if [ $RETURN -eq 1 ]; then
        return 0
    elif [ $RETURN -eq 0 ]; then
        case "$BOARD" in
            1) get_install blinkt ;;
            2) get_install dot3k ;;
            3) get_install flotilla ;;
            4) get_install mote ;;
            5) get_install pibrella ;;
            6) get_install piglow ;;
            7) get_install skywriter ;;
            *) error_box --text "Error: unrecognized option";;
        esac ||error_box "There was an error running option $BOARD"
    fi
}

util_menu() {

TITLE="Pimoroni Product Installer"
MAINLIST="\
1/About this program/\
2/Gather system info/\
3/Update my Pi software/\
4/Help me make a screenshot/\
5/Take me to the support forums"

    if [ -n "$xdisplay" ]; then
        UTIL=$(zenity --title="$TITLE" --list \
            --column="Option" --column="Description" \
            --cancel-label=Back --ok-label=Select \
            --height=$BOXHEIGHT --width=$BOXWIDTH \
            $MAINLIST 2> /dev/null
        )
    else
        UTIL=$(whiptail --title "$TITLE" --menu "" \
            --cancel-button Back --ok-button Select \
            $BOXHEIGHT $(($BOXWIDTH-10)) $BOX_MENU_HEIGHT \
            $MAINLIST 3>&1 1>&2 2>&3
        )
    fi

    RETURN=$?
    if [ $RETURN -eq 1 ]; then
        return 0
    elif [ $RETURN -eq 0 ]; then
        case "$UTIL" in
            1) about_box ;;
            2) save_stdout diagnostic ;;
            3) get_install uptodate ;;
            4) save_snap ;;
            5) launch_url "http://forums.pimoroni.com" ;;
            *) error_box "Error: unrecognized option";;
        esac ||error_box "There was an error running option $UTIL"
    fi
}

# checks and init

arch_check
os_check
space_chk

if [ $debugmode != "no" ]; then
    echo "USER_HOME is $USER_HOME" && newline
    echo "IS_RASPBIAN is $IS_RASPBIAN"
    echo "IS_MACOSX is $IS_MACOSX"
    echo "IS_SUPPORTED is $IS_SUPPORTED"
    echo "IS_EXPERIMENTAL is $IS_EXPERIMENTAL"
    newline
fi

if ! $IS_ARMHF; then
    warning "This hardware is not supported, sorry!"
    warning "Config files have been left untouched"
    newline && exit 1
fi

if $IS_ARMv8 && [ $armv8 == "no" ]; then
    warning "Sorry, your CPU is not supported by this installer"
    newline && exit 1
elif $IS_ARMv7 && [ $armv7 == "no" ]; then
    warning "Sorry, your CPU is not supported by this installer"
    newline && exit 1
elif $IS_ARMv6 && [ $armv6 == "no" ]; then
    warning "Sorry, your CPU is not supported by this installer"
    newline && exit 1
fi

if [ $raspbianonly == "yes" ] && ! $IS_RASPBIAN;then
        warning "This script is intended for Raspbian on a Raspberry Pi!"
        newline && exit 1
fi

if $IS_RASPBIAN; then
    raspbian_check
    if ! $IS_SUPPORTED && ! $IS_EXPERIMENTAL; then
        newline && warning "--- Warning ---" && newline
        echo "The $productname installer"
        echo "does not work on this version of Raspbian."
        echo "Check https://github.com/$gitusername/$gitreponame"
        echo "for additional information and support"
        newline && exit 1
    fi
fi

if ! $IS_SUPPORTED && ! $IS_EXPERIMENTAL; then
        warning "Your operating system is not supported, sorry!"
        newline && exit 1
fi

if $IS_EXPERIMENTAL; then
    warning "Support for your operating system is experimental. Please visit"
    warning "forums.pimoroni.com if you experience issues with this product."
    newline
fi

if [ $forcesudo == "yes" ]; then
    sudocheck
fi

home_dir && WORKING_DIR="$USER_HOME/Pimoroni"
[ -d $WORKING_DIR ] || mkdir $WORKING_DIR
cd $WORKING_DIR

xdisplay="$DISPLAY"
if [ $debugmode == "yes" ] && [ -n "$xdisplay" ]; then
    xdisplay=""
fi; box_size

if ! [ "$FORCE" == '-y' ]; then
    info_box "\
This handy tool will help you get started with Pimoroni products.\n\
Simply pick the add-on board you want to set up from the list,\n\
hit select and we'll walk you through the install process in a\n\
few easy steps. Enjoy!\n\n\
The Pimoroni Crew"
    if [ -n "$xdisplay" ]; then
        status_box "Checking for updates..."
    else
        status_box "We will now check for available updates. Click OK."
    fi
    self_update
fi

listIFS="$IFS";
IFS="/"

while true; do
    main_menu
done

IFS=$listIFS

exit 0
